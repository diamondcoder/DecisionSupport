var slice = Array.prototype.slice, root = this;


function new_asyn(args){
  // $ holds the currying function
  var is_fun = false;

  var $ = function(){
    var args = slice.call(arguments,0);
    if(is_fun)$.funs.push(args);
    else $.args.push(args);
    is_fun = !is_fun;
    return $;
  }

  var done;
  var done_yet = function(){
    for(var i=0;i<$.args.length;i++){
      if($.funs[i]!=null)return;
    }
    if(done){
      var asyn = new_caller();
      for(var i=0,l=$.results.length;i<l;i++){
        asyn[i]=$.results[i];
      }
      done(asyn);
    }
  }
  
  // stores functions new_asyn(fn)
  $.funs = [args];
  // stores functions arguments new_async(fn)(arguments) 
  $.args = [];
  // stores arguments of function
  $.results = [];
  // make function recognizable
  $.constructor = new_asyn;

  $.end = function(fn){
    done = fn;
    var args = this.args;
    // Store previous returned Object
    var return_,callback_found;

    for(var i=0,l = args.length;i<l;i++){
      callback_found = false;
      for(var ii=0,ll= args[i].length;ii<ll;ii++){
        if( args[i][ii].constructor === new_asyn ){
          callback_found = true;
          (function(i){
            args[i][ii]=function Asyn_callback(){
              //console.log('arguments');
              //console.log(arguments);
              $.results[i] = slice.call(arguments,0);
              $.funs[i] = undefined;
              done_yet();
            };
          })(i);
          break;
        }
      }
      // Determine function calling
      if(typeof $.funs[i][0] === 'function' && $.funs[i][1]==null){
        // Asyn(fn)()
        return_ = $.funs[i][0].apply(return_,$.args[i]);
      }else if(typeof $.funs[i][1]=='string'){
        // Asyn(fn,'method')()
        var s = $.funs[i][1];
        return_ = $.funs[i][0][s].apply($.funs[i][0],$.args[i]);
      }else if(typeof $.funs[i][1] == 'function' ){
        // Asyn(thisValue,fn)('arg')
        return_ = $.funs[i][1].apply($.funs[i][0],$.args[i]);
      }else if(typeof $.funs[i][0] == 'string'){
        // Asyn('method')()
        return_ = return_[$.funs[i][0]].apply(return_,$.args[i]);
      }else if($.funs[i][0] == null){
        // ()('test')
        return_.apply(return_,$.args[i]);
      }

      if(callback_found===false){
        $.results[i] = return_;
        $.funs[i] = undefined;
        done_yet();
      }
    }
    return new_caller();
  };

  return $;
};

/*
 * Creates new `Asyn` function caller 
 *   Asyn(console.log)('test').end();
 *
 * A new base class is created when user calls
 * 
 *   end(function(Asyn){
 *     ;
 *   });
*/
function new_caller(){
  var a = function(){
    var args = slice.call(arguments,0);
    if( typeof args[0] === 'string' && args.length === 1 ){
      var s = new String(args[0]);
      s.constructor = new_asyn;
      return s;
    }
    return new_asyn(args);
  }
  a.constructor = new_asyn;
  return a;
}

module.exports = new_caller();
