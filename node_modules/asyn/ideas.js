var fs = require('fs');

/* using UnlimitJS */
Sync[fs.readFile]('test')
    [fs.moveFile]('test')
    [fs.removeFile]('testing')
    .error(function(){
      ;
    })
    .complete(function(results){
      ;
    })

Sync
    (fs.readFile)('test')
    (fs.moveFile)('test')
    (fs.removeFile)('testing')
Asyn
    (array,'map')(function(){
      ;
    })
    .error(function(){
      ;
    })
    .complete(function(results){
      ;
    })

Asyn
// All of the following functions run asyncrously
(fs.readFile)('test',Asyn('test'))
(array,'map')(function(i){
  return i<20;
})
// Once the above functions have finished running run these functions 
.cue(console.log)('done!')
.cue(alert)('yo')
.end(function(Asyn){
   console.log(Asyn('test')[1]);
 })


on,un

cue,end,die,err,get,set,got,has,out,off,put,rip
syn,asy

.clear
.Asyn
    (array,'map')()
    .error(function(){
      ;
    })
    .complete(function(results){
      ;
    })


if .end() is passed no arguments, return current A5 Object or new one?
if .end() is passed a function return new A5 Object

.end() calls the previous functions and calls the passed functions containing the arguments

@return returns a new Asyn Object

if it returned the current A5 Object it would be blocking or provide no actual arguments

var x = A5(console.log)('test').end();
// x can't contain any values because it would have to blocking/synchorous

